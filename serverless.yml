service: ${env:SERVICE,'aircourts-availability'}
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-dynamodb
  - serverless-offline  # should be last in list

provider:
  name: aws
  deploymentMethod: direct
  runtime: nodejs16.x
  region: eu-west-3
  endpointType: REGIONAL
  memorySize: 256
  versionFunctions: false
  apiGateway:
    minimumCompressionSize: 1400
  stackTags:
    SERVICE: ${self:service}-${sls:stage}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    API_URL: ${env:API_URL}
    LOCAL_DDB: ${env:LOCAL_DDB,false}
    CRON_LAMBDA_NAME: ${self:service}-${sls:stage}-cron
    BUCKET_NAME: ${self:service}-${sls:stage}-bucket
    SLACK_TOKEN: ${env:SLACK_TOKEN}
    SLACK_CHANNEL: ${env:SLACK_CHANNEL}
    NUMBER_OF_DAYS_SWEEP: 7
    NUMBER_OF_DAYS_SUBSCRIPTION: 30
  iam:
    role:
      statements:
        # Allow functions to list all buckets
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: 
           - 'arn:aws:dynamodb:eu-west-3:940279841315:table/slots'
           - 'arn:aws:dynamodb:eu-west-3:940279841315:table/slots/index/StartDateTimestampGSI'
        - Effect: Allow
          Action: 'lambda:InvokeFunction'
          Resource: 
           - arn:aws:lambda:eu-west-3:940279841315:function:${self:service}-${sls:stage}-cron
        - Effect: Allow
          Action: 
           - 's3:GetObject'
           - 's3:GetObjectVersion'
           - 's3:PutObject'
           - 's3:DeleteObject'
           - 's3:DeleteObjectVersion'
          Resource: 
           - arn:aws:s3:::${self:service}-${sls:stage}-bucket/*
        - Effect: Allow
          Action: 
           - 's3:ListBucket'
           - 's3:ListBucketVersions'
          Resource: 
           - arn:aws:s3:::${self:service}-${sls:stage}-bucket
  s3:
    bucketCommon:
      name: ${self:service}-${sls:stage}-bucket
      WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRuleHtml
            Prefix: html
            Status: Enabled
            ExpirationInDays: 15
            Transitions:
              - TransitionInDays: 10
                StorageClass: GLACIER
          - Id: GlacierRuleData
            Prefix: data
            Status: Enabled
            ExpirationInDays: 15
            Transitions:
              - TransitionInDays: 10
                StorageClass: GLACIER
          - Id: GlacierRuleDiff
            Prefix: diff
            Status: Enabled
            ExpirationInDays: 15
            Transitions:
              - TransitionInDays: 10
                StorageClass: GLACIER
          - Id: GlacierRuleSubscriptions
            Prefix: subscriptions
            Status: Enabled
            ExpirationInDays: 40
            Transitions:
              - TransitionInDays: 35
                StorageClass: GLACIER
      VersioningConfiguration:
          Status: Enabled

package:
  patterns:
    - '!.dynamodb/**'
    - '!.vscode/**'
    - '!diagrams/**'
    - '!sample.json'
    - '!seeds/**'
	
custom:
  serverless-dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: false
    seed:
      dev:
        sources:
          - table: slots
            sources: [./seeds/slots.json]

functions:
  app:
    handler: lambda.handler
    events:
      - http: 
          method: any
          path: /{proxy+}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
    timeout: 25
  cron:
    handler: cron.handler
    memorySize: 512
    timeout: 12
    events:
      - schedule:
          rate: rate(15 minutes)
  s3DataCapture:
    handler: s3-data-capture.handler
    memorySize: 512
    timeout: 25
    events:
      - s3:
          bucket: bucketCommon
          event: s3:ObjectCreated:*
          rules:
            - prefix: data/
            - suffix: .json
  notifier:
    handler: notifier.handler
    memorySize: 512
    timeout: 25
    events:
      - s3:
          bucket: bucketCommon
          event: s3:ObjectCreated:*
          rules:
            - prefix: diff/
            - suffix: .json

resources:
  Resources:
    SlotsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: slots
        AttributeDefinitions:
          - AttributeName: slot_id
            AttributeType: S
          - AttributeName: start_date
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: slot_id
            KeyType: HASH
          - AttributeName: start_date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        GlobalSecondaryIndexes:
          - IndexName: StartDateTimestampGSI
            KeySchema:
              - AttributeName: start_date
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - data